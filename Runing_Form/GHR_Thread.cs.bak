using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Diagnostics;
using Rhino4;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Net;
using System.Windows.Forms;
using Newtonsoft.Json.Linq;
using System.Web.Mail;

namespace Runing_Form
{
    public class GHR
    {
        public Rhino5Application rhino;
        public dynamic grasshopper;
        public int id = -1;

        // These two variables are for thread communication.
        public THREAD_RESPONSE lastRes =  THREAD_RESPONSE.NO_RESPONSE;
        public String last_GH_FilePath = String.Empty;
        public Dictionary<int, ImageData> lastImagesDatasRequested = new Dictionary<int, ImageData>();
        public String tempImagesLocation = String.Empty;
        public Dictionary<int, bool> lasiImagesTaken = new Dictionary<int, bool>();

        public GHR(int id, Rhino5Application rhino, dynamic grasshopper)
        {
            this.id = id;
            this.grasshopper = grasshopper;
            this.rhino = rhino;
        }

        public void Wrapper_Open()
        {
            Open_GH_File(last_GH_FilePath);
            lastRes = THREAD_RESPONSE.SUCCESS;
        }

        public void Wrapper_Get_Pictures()
        {
            Get_Pictures(lastImagesDatasRequested, tempImagesLocation, out lasiImagesTaken);
            lastRes = THREAD_RESPONSE.SUCCESS;
        }

        public bool Open_GH_File(String filePath)
        {
            MyLog("Starting  Open_GH_File(*,filePath=" + filePath);
            DateTime before = DateTime.Now;

            try
            {
                grasshopper.CloseAllDocuments();
                Thread.Sleep(1000);
                grasshopper.OpenDocument(filePath);
            }
            catch (Exception e)
            {
                MyLog("Exception=" + e.Message);
                return false;
            }

            MyLog("Finished succefully  Open_GH_File(*,filePath=" + filePath + ((int)(DateTime.Now-before).TotalMilliseconds) + " miliseconds after Starting");
            return true;
        }

        public void MyLog(String line)
        {
            Console.WriteLine("(id=" + id + ") " + line);
        }

        public bool DeleteAll()
        {
            DateTime beforeTime = DateTime.Now;
            String logLine;
                int fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "Starting DeleteAll()";
                MyLog(logLine);


                // Delete all
                String selectAllCommand = "SelLayerNumber 0";
                int selectCommandRes = rhino.RunScript(selectAllCommand, 1);
                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "selectCommandRes="+selectCommandRes+ " After " + fromStart + " milliseconds";
                MyLog(logLine);
                

                String deleteCommand = "Delete";
                int deleteCommandRes = rhino.RunScript(deleteCommand, 1);
                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "deleteCommandRes="+selectCommandRes+ " After " + fromStart + " milliseconds";
                MyLog(logLine);
            return true;

        }
        public bool Save_A_Picture(ImageData imageData, String outputPath)
        {
            MyLog("Starting Save_A_Picture(ImageData imageData, String outputPath))");
            DateTime beforeTime = DateTime.Now;
            String logLine;
                int fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);

                DeleteAll();
                foreach (String paramName in imageData.propValues.Keys)
                {
                    Double value = imageData.propValues[paramName];
                    if (!grasshopper.AssignDataToParameter(paramName, value))
                    {
                        fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                        logLine = "grasshopper.AssignDataToParameter(paramName="+paramName+", value="+value+") returned false After " + fromStart + " milliseconds";
                        MyLog(logLine);
                        return false;
                    }

                    fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                    logLine = "After assigning param:"+paramName+" the value=" + value + " After " + fromStart + " milliseconds";
                    MyLog(logLine);
                
                }

                grasshopper.RunSolver(true);

                foreach (String bakerId in imageData.bakeries)
                {
                    Object objRes = grasshopper.BakeDataInObject(bakerId);

                    fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                    logLine = "After baking object:" + bakerId + " After " + fromStart + " milliseconds";
                    MyLog(logLine);
                }

                String captureCommand = "-FlamingoRenderTo f " + outputPath + " " + 150 + " " + 150;
                int captureCommandRes = rhino.RunScript(captureCommand, 1);
                MyLog("Image rendered by:"+captureCommand);

                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "After rendering into" + outputPath + " After " + fromStart + " milliseconds";
                MyLog(logLine);
                return true;
        }

        public bool Get_Pictures(Dictionary<int,ImageData> imagesDatas, String folderPath, out Dictionary<int,bool> resImagesStrings)
        {
            resImagesStrings = new Dictionary<int,bool>();
            DateTime beforeTime = DateTime.Now;

            String logLine = "Starting Get_Pictures()";
            MyLog(logLine);

            if (!Directory.Exists(folderPath))
            {
                logLine = "Directory " + folderPath + " does not exist";
                MyLog(logLine);
                return false;
            }

            foreach (int picNum in imagesDatas.Keys)
            {
                String filePath = folderPath + Path.DirectorySeparatorChar + "yofi_" + picNum + ".png";
                if (!Save_A_Picture(imagesDatas[picNum], filePath))
                {
                    logLine = "Get_A_Picture(imagesDatas[picNum=" + picNum + "], filePath=" + filePath + "); failed";
                    MyLog(logLine);
                    return false;
                }

/*
                // read the picture into the memory so it does not lock the file
                FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);
                Image tempImage = Image.FromStream(fs);
                MemoryStream memoryStream = new MemoryStream();
                tempImage.Save(memoryStream, tempImage.RawFormat);

                fs.Close();
                fs.Dispose();
                
                string encoded = Convert.ToBase64String(memoryStream.ToArray());

                ImageString newImageString = new ImageString();
                newImageString.imageCodedTo64 = encoded;
                resImagesStrings[picNum] = newImageString;
*/
             }

            DateTime afterTime = DateTime.Now;
            int timed = (int)((afterTime - beforeTime).TotalMilliseconds);
            MyLog("Total Get_Pictures() call took " + timed + " millseconds");
            return true;
        }

    }

    public enum THREAD_RESPONSE
    {
        NO_RESPONSE,
        SUCCESS,
        FAIL
    }

    public class GHR_Dispatcher
    {
        public List<GHR> ghrs;

        public bool init_rhino_apps(int num_of_instances, bool kepp_rhino_visible, String sceneFilePath)
        {
            // kill all current Rhino4.exe processes
            Process[] procs = Process.GetProcessesByName("Rhino4");
            Console.WriteLine("Killing " + procs.Length + " previous Rhino processes");
            foreach (Process p in procs) { p.Kill(); }
            Thread.Sleep(1000);
            procs = Process.GetProcessesByName("Rhino4");
            Console.WriteLine(procs.Length + " previous Rhino processes remaind alive");


            ghrs = new List<GHR>();
            for (int i = 0; i < num_of_instances; i++)
            {
                Console.WriteLine("Starting Rhino # " + i + " at " + DateTime.Now);
                Rhino5Application rhino = new Rhino5Application();
                rhino.Visible = 1;
                if (rhino == null)
                {
                    Console.WriteLine("(i="+i+") rhino == null");
                    return false;
                }
                for (int tries = 0; tries < 200; tries++)
                {
                    if (rhino.IsInitialized() == 1)
                    {
                        break;
                    }
                    Thread.Sleep(100);
                }
                Thread.Sleep(1000);

                FileInfo sceneFileInfo = new FileInfo(sceneFilePath);
                DirectoryInfo sceneDirInfo = sceneFileInfo.Directory;

                String replicateFilePath = sceneDirInfo.FullName + Path.DirectorySeparatorChar + "rep_" + i + ".3dm";
                File.Copy(sceneFilePath, replicateFilePath, true);


                Console.WriteLine("Loading scene Rhino # " + i + " at " + DateTime.Now);
                String openCommand = "-Open " + replicateFilePath;
                int openCommandRes = rhino.RunScript(openCommand, 1);

                int isInitialized = rhino.IsInitialized();
                if (isInitialized != 1)
                {
                    Console.WriteLine("ERROR!!: (i=" + i + ") (" + isInitialized + "==isInitialized != 1)");
                    return false;
                }
                Console.WriteLine("Starting Grasshopper # " + i + " at " + DateTime.Now);
                rhino.RunScript("_Grasshopper", 0);
                Thread.Sleep(2000);
                dynamic grasshopper = rhino.GetPlugInObject("b45a29b1-4343-4035-989e-044e8580d9cf", "00000000-0000-0000-0000-000000000000") as dynamic;


                if (grasshopper == null)
                {
                    Console.WriteLine("ERROR!!: (i=" + i + ") (grasshopper == null)");
                    return false;
                }

                ghrs.Add(new GHR(i,rhino,grasshopper));


                rhino.Visible = kepp_rhino_visible ? 1 : 0;

                Thread.Sleep(2000);

                Console.WriteLine("Finished instance #" + i + " at " + DateTime.Now);
            }
            Console.WriteLine("Finished all instances at " + DateTime.Now);

            

/*
            String mailTo = "tamir@ez3d.co";
            String subject = "Rhino Server on Machine= " + Environment.MachineName + " is ready for rendering...";
            Console.WriteLine("Sending mail to " + mailTo);

            // create mail message object
            MailMessage mail = new MailMessage();
            mail.From = mailTo; // put the from address here
            mail.To = mailTo; // put to address here
            mail.Subject = subject; // put subject here
            mail.Body = String.Empty; // put body of email here
            SmtpMail.SmtpServer = "smtp.gmail.com"; // put smtp server you will use here
            // and then send the mail
            SmtpMail.Send(mail);
*/
            Console.WriteLine("Still not sending mail");
            return true;
        }

        public void turnVisibleOn()
        {
            foreach (GHR ghr in ghrs)
            {
                ghr.rhino.Visible = 1;
            }
        }

        public static bool deciferImagesDataFromJSON(String jsonString, out List<ImageData> imagesDatas)
        {
            imagesDatas = new List<ImageData>();

            Console.WriteLine("input String=:");
            Console.WriteLine(jsonString);

            Object o;
            try
            {
                o = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonString);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception in DeserializeObject(" + jsonString + ")");
                Console.WriteLine(e.Message);
                return false;
            }
            if (o.GetType() != typeof(JArray))
            {
                Console.WriteLine("Could not parse input String=" + jsonString + " into array");
                return false;
            }

            JArray array_Of_Hashes = (Newtonsoft.Json.Linq.JArray)o;


            foreach (JToken token in array_Of_Hashes.Children())
            {
                ImageData imageData;
                if (!deciferImageDataFromToken(token, out imageData))
                {
                    Console.WriteLine("deciferImageDataFromToken() failed for Token=" + token.ToString());
                    return false;
                }
                imagesDatas.Add(imageData);
                Console.WriteLine("Finished Token=" + token.ToString());
            }
            return true;
        }



        private static bool deciferImageDataFromToken(JToken token, out ImageData imageData)
        {
            imageData = new ImageData();

            Console.WriteLine("token=" + token.ToString());
            if (!token.HasValues) return false;

            foreach (JToken innerToken in token.Children())
            {
                Console.WriteLine("innerToken=" + innerToken.ToString());
                JProperty property = (JProperty)innerToken;

                String propName = property.Name.Trim();
                if (propName.ToLower() == "bake")
                {
                    String toBakeComponentName = ((String)property.Value).Trim();
                    imageData.bakeries.Add(toBakeComponentName);
                }
                else
                {
                    imageData.propValues[propName] = (Double)property.Value;
                }

                Console.WriteLine("Finished innerToken=" + innerToken.ToString());
            }
            return true;
        }

        public bool open_gh_file_all_rhinos(String filePath)
        {
            Dictionary<int,Thread> threads = new Dictionary<int,Thread>();
            foreach (GHR ghr in ghrs)
            {
                ghr.lastRes = THREAD_RESPONSE.NO_RESPONSE;
                ghr.last_GH_FilePath = filePath;
                threads[ghr.id] = new Thread(new ThreadStart(ghr.Wrapper_Open));
                threads[ghr.id].Start();
/*
                if (!ghr.Open_GH_File(filePath))
                {
                    Console.WriteLine("Failed to open gh file =" + filePath);
                    return false;
                }
*/
            }

            foreach (int id in threads.Keys)
            {
                threads[id].Join();
                if (ghrs[id].lastRes != THREAD_RESPONSE.SUCCESS)
                {
                    ghrs[id].MyLog("Dispatcher found bad result = " + ghrs[id].lastRes.ToString());
                }
            }

            // compose new 

            return true;
        }

        public bool get_many_images_use_all_rhinos(String jsonString, String tepmImagesLocation, out String resStr)
        {
            Console.WriteLine("Starting dispatcher get_many_images_use_all_rhinos()");

            DateTime beforeTime = DateTime.Now;
            Dictionary<int, Thread> threads = new Dictionary<int, Thread>();
            resStr = String.Empty;

            // understand the jsonString
            List<ImageData> imagesDatas;
            if (!deciferImagesDataFromJSON(jsonString, out imagesDatas))
            {
                Console.WriteLine("deciferImagesDataFromJSON() failed for json_listOfHashes=" + jsonString);
                return false;
            }

            int fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
            String logLine = "After JSON decifer : " + fromStart + " milliseconds";
            Console.WriteLine(logLine);

            int imagesPerRhino = (int)Math.Ceiling((Double)imagesDatas.Count / (Double)ghrs.Count);
            int i = 0;
            foreach (GHR ghr in ghrs)
            {
                ghr.lastRes = THREAD_RESPONSE.NO_RESPONSE;
                ghr.lastImagesDatasRequested = new Dictionary<int, ImageData>();
                ghr.tempImagesLocation = tepmImagesLocation;

                for (var j = 0; j < imagesPerRhino && i < imagesDatas.Count; j++, i++)
                {
                    ghr.lastImagesDatasRequested[i] = imagesDatas[i];
                }
                threads[ghr.id] = new Thread(new ThreadStart(ghr.Wrapper_Get_Pictures));
                threads[ghr.id].Start();
            }

            foreach (int id in threads.Keys)
            {
                threads[id].Join();
                if (ghrs[id].lastRes != THREAD_RESPONSE.SUCCESS)
                {
                    ghrs[id].MyLog("Dispatcher found bad result = " + ghrs[id].lastRes.ToString());
                }
            }



/*
            Dictionary<int,ImageString> allResults = new Dictionary<int,ImageString>();
            foreach (GHR ghr in ghrs)
            {
                foreach(int image_id in ghr.lasiImagesStringsReturned.Keys)
                {
                    allResults[image_id] = ghr.lasiImagesStringsReturned[image_id];
                }
                
            }

            List<ImageString> beforeJson = new List<ImageString>();
            for (i = 0; i < imagesDatas.Count; i++)
            {
                beforeJson.Add(allResults[i]);
            }

            resStr = Newtonsoft.Json.JsonConvert.SerializeObject(beforeJson);
*/

            resStr = imagesDatas.Count.ToString();
            DateTime afterTime = DateTime.Now;
            int timed = (int)((afterTime - beforeTime).TotalMilliseconds);
            Console.WriteLine("Total get_many_images_use_all_rhinos() call took " + timed + " millseconds");
            return true;
        }
        
    }

}
