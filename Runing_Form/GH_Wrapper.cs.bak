using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.Drawing;
using System.Threading;
using System.IO;
using System.Web;
using Newtonsoft.Json;
//using System.Web.Services;
using System.Web.Script.Services;
using Newtonsoft.Json.Linq;
using Rhino4;
using Grasshopper.Plugin;

namespace Runing_Form
{
    public class RGH_Object
    {
        public Rhino5Application rhino;
        public dynamic grasshopper;
    }
    public static class GH_Wrapper
    {
        public static bool init_rhino_apps(int num_of_instances)
        {
            // kill all current Rhino4.exe processes
            Process proc = new System.Diagnostics.Process();
            proc.EnableRaisingEvents=false;
            proc.StartInfo.FileName="killAllRhino.bat";
            proc.Start();
            //string output = proc.StandardOutput.ReadToEnd();
            proc.WaitForExit();
            //Console.WriteLine("taskkill returned:"+output);

            List<RGH_Object> rhino_objs = new List<RGH_Object>();
            for (int i = 0; i < num_of_instances; i++)
            {
                Console.WriteLine("i=" + i);
                RGH_Object rgh_obj = new RGH_Object();
                Rhino5Application rhino = new Rhino5Application();
                rhino.Visible = 1;
                for (int tries = 0; tries < 200; tries++)
                {
                    if (rhino.IsInitialized() == 1)
                    {
                        break;
                    }
                    Thread.Sleep(100);
                }

                if (rhino.IsInitialized() != 1)
                {
                    return false;
                }
                rhino.RunScript("_Grasshopper", 0);
                Thread.Sleep(2000);
                rgh_obj.rhino = rhino;
                rgh_obj.grasshopper = rhino.GetPlugInObject("b45a29b1-4343-4035-989e-044e8580d9cf", "00000000-0000-0000-0000-000000000000") as dynamic;

//                rgh_obj.grasshopper = rhino.GetPlugInObject("b45a29b1-4343-4035-989e-044e8580d9cf", "00000000-0000-0000-0000-000000000000") as GH_RhinoScriptInterface;


                if (rgh_obj.rhino == null) Console.WriteLine("rhino == null");
                if (rgh_obj.grasshopper == null) Console.WriteLine("grasshopper == null");
                rgh_obj.rhino.Visible = 0;


            }
            return true;
        }
        private static bool getObjects(ref Object rhinoObj, ref Object grashopperObj)
        {
            DateTime startTime = DateTime.Now;
            DateTime endTime;
            // lets check if Rhino is activated (as an application)
            Process[] allProcesses = Process.GetProcesses();
            Process[] rhinoProcesses = Process.GetProcessesByName("Rhino4");
            if (rhinoProcesses.Length < 1)
            {
                ProcessStartInfo psi = new ProcessStartInfo(@"C:\Program Files\Rhinoceros 5.0 90-Day Evaluation\System\Rhino4.exe");
                Process p = Process.Start(psi);
            }

            var type = Type.GetTypeFromProgID("Rhino5.Interface", true);
            Rhino4.IRhino5Interface rhino = (Rhino4.IRhino5Interface)Activator.CreateInstance(type);
            rhino.Visible = 1;
            for (int tries = 0; tries < 200; tries++)
            {
                if (rhino.IsInitialized() == 1)
                {
                    break;
                }
                Thread.Sleep(100);
            }

            if (rhino.IsInitialized() != 1)
            {
                return false;
            }

            rhino.RunScript("_Grasshopper", 0);
            dynamic grasshopper = rhino.GetPlugInObject("b45a29b1-4343-4035-989e-044e8580d9cf", "00000000-0000-0000-0000-000000000000") as dynamic;
            if (grasshopper.IsEditorVisible())
            {
                endTime = DateTime.Now;
                Console.WriteLine("Init_Grasshopper succeeded!. Grasshopper already visible! after " + (endTime - startTime).TotalMilliseconds + " milliseconds");
            }
            else
            {
                grasshopper.ShowEditor();
                endTime = DateTime.Now;
                Console.WriteLine("Init_Grasshopper succeeded!. after " + (endTime - startTime).TotalMilliseconds + " milliseconds");
            }

            rhinoObj = rhino;
            grashopperObj = grasshopper;
            return true;
        }

        public static bool GH_Load_File(String filePath)
        {
            DateTime startTime = DateTime.Now;
            DateTime endTime;
            // lets check if Rhino is activated (as an application)
            Process[] allProcesses = Process.GetProcesses();
            Process[] rhinoProcesses = Process.GetProcessesByName("Rhino4");
            if (rhinoProcesses.Length < 1)
            {
                ProcessStartInfo psi = new ProcessStartInfo(@"C:\Program Files (x86)\Rhinoceros 5.0 90-Day Evaluation\System\Rhino4.exe");
                Process p = Process.Start(psi);
            }
            
            var type = Type.GetTypeFromProgID("Rhino5.Interface", true);
            Rhino4.IRhino5Interface rhino = (Rhino4.IRhino5Interface)Activator.CreateInstance(type);
            rhino.Visible = 1;
            for (int tries = 0; tries < 200; tries++)
            {
                if (rhino.IsInitialized() == 1)
                {
                    break;
                }
                Thread.Sleep(100);
            }

            if (rhino.IsInitialized() != 1)
            {
                return false;
            }

            rhino.RunScript("_Grasshopper", 0);
            dynamic grasshopper = rhino.GetPlugInObject("b45a29b1-4343-4035-989e-044e8580d9cf", "00000000-0000-0000-0000-000000000000") as dynamic;
            if (grasshopper.IsEditorVisible())
            {
                endTime = DateTime.Now;
                Console.WriteLine("Init_Grasshopper succeeded!. Grasshopper already visible! after " + (endTime - startTime).TotalMilliseconds + " milliseconds");
            }
            else
            {
                grasshopper.ShowEditor();
                endTime = DateTime.Now;
                Console.WriteLine("Init_Grasshopper succeeded!. after " + (endTime - startTime).TotalMilliseconds + " milliseconds");
            }

            try
            {
                grasshopper.CloseAllDocuments();

                Thread.Sleep(1000);

                grasshopper.OpenDocument(filePath);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception="+e.Message);
            }
            return true;
        }

        public static bool getImages(String json_listOfHashes, String outputPath, out int numOfImages_taken, out List<String> logLines)
        {
            logLines = new List<string>();
            numOfImages_taken = 0;
            DateTime beforeTime = DateTime.Now;
            List<ImageData> imagesDatas;
            if (!deciferImagesDataFromJSON(json_listOfHashes, out imagesDatas))
            {
                Console.WriteLine("deciferImagesDataFromJSON() failed for json_listOfHashes=" + json_listOfHashes);
                return false;
            }

            int fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
            String logLine = "After JSON decider : " + fromStart + " milliseconds";
            logLines.Add(logLine);
            Console.WriteLine(logLine);


            dynamic rhino = null, grasshopper = null;
            if (!getObjects(ref rhino, ref grasshopper))
            {
                return false;
            }

            String tempDirPath = outputPath;

            for (int i = 0; i < imagesDatas.Count; i++)
            {
                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "Starting working on picture # " + i.ToString() + " After " + fromStart + " milliseconds";
                logLines.Add(logLine);
                Console.WriteLine(logLine);

                // Delete all
                String selectAllCommand = "All";
                int selectCommandRes = rhino.RunScript(selectAllCommand, 1);

                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "After select All in picture # " + i.ToString() + " After " + fromStart + " milliseconds";
                logLines.Add(logLine);
                Console.WriteLine(logLine);


                String deleteCommand = "Delete";
                int deleteCommandRes = rhino.RunScript(deleteCommand, 1);

                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "After Delete in picture # " + i.ToString() + " After " + fromStart + " milliseconds";
                logLines.Add(logLine);
                Console.WriteLine(logLine);


                ImageData imageData = imagesDatas[i];
                foreach (String paramName in imageData.propValues.Keys)
                {
                    Double value = imageData.propValues[paramName];
                    if (!grasshopper.AssignDataToParameter(paramName, value))
                    {
                        Console.WriteLine("WebService - changeParamInGrasshopper(paramName=" + paramName + ", value=" + value + ") failed");
                        return false;
                    }

                    fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                    logLine = "(Pic # " + i.ToString()+") After assigning param:"+paramName+" the value=" + value + " After " + fromStart + " milliseconds";
                    logLines.Add(logLine);
                    Console.WriteLine(logLine);
                
                }

                grasshopper.RunSolver(true);

                foreach (String bakerId in imageData.bakeries)
                {
                    Object objRes = grasshopper.BakeDataInObject(bakerId);

                    fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                    logLine = "(Pic # " + i.ToString() + ") After baking object:" + bakerId + " After " + fromStart + " milliseconds";
                    logLines.Add(logLine);
                    Console.WriteLine(logLine);
                }

                String tempFilePath = tempDirPath + Path.DirectorySeparatorChar + "yofi_" + numOfImages_taken + ".png";
                String captureCommand = "-FlamingoRenderTo f " + tempFilePath + " " + 150 + " " + 150;
                Console.WriteLine("Image (" + i + ") rendered by:"+captureCommand);
                int captureCommandRes = rhino.RunScript(captureCommand, 1);
                numOfImages_taken++;

                fromStart = (int)((DateTime.Now - beforeTime).TotalMilliseconds);
                logLine = "(Pic # " + i.ToString() + ") After rendering into" + tempFilePath + " After " + fromStart + " milliseconds";
                logLines.Add(logLine);
                Console.WriteLine(logLine);

            }

            DateTime afterTime = DateTime.Now;
            int timed = (int)((afterTime - beforeTime).TotalMilliseconds);
            Console.WriteLine("Total GetPicturesJSON() call took " + timed + " millseconds");
            return true;
        }

        public static bool deciferImagesDataFromJSON(String jsonString, out List<ImageData> imagesDatas)
        {
            imagesDatas = new List<ImageData>();

            Console.WriteLine("input String=:");
            Console.WriteLine(jsonString);

            Object o;
            try
            {
                o = Newtonsoft.Json.JsonConvert.DeserializeObject(jsonString);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception in DeserializeObject(" + jsonString + ")");
                Console.WriteLine(e.Message);
                return false;
            }
            if (o.GetType() != typeof(JArray))
            {
                Console.WriteLine("Could not parse input String=" + jsonString + " into array");
                return false;
            }

            JArray array_Of_Hashes = (Newtonsoft.Json.Linq.JArray)o;


            foreach (JToken token in array_Of_Hashes.Children())
            {
                ImageData imageData;
                if (!deciferImageDataFromToken(token, out imageData))
                {
                    Console.WriteLine("deciferImageDataFromToken() failed for Token=" + token.ToString());
                    return false;
                }
                imagesDatas.Add(imageData);
                Console.WriteLine("Finished Token=" + token.ToString());
            }
            return true;
        }



        private static bool deciferImageDataFromToken(JToken token, out ImageData imageData)
        {
            imageData = new ImageData();

            Console.WriteLine("token=" + token.ToString());
            if (!token.HasValues) return false;

            foreach (JToken innerToken in token.Children())
            {
                Console.WriteLine("innerToken=" + innerToken.ToString());
                JProperty property = (JProperty)innerToken;

                String propName = property.Name.Trim();
                if (propName.ToLower() == "bake")
                {
                    String toBakeComponentName = ((String)property.Value).Trim();
                    imageData.bakeries.Add(toBakeComponentName);
                }
                else
                {
                    imageData.propValues[propName] = (Double)property.Value;
                }

                Console.WriteLine("Finished innerToken=" + innerToken.ToString());
            }
            return true;
        }
    }

    public class ImageData
    {
        public List<String> bakeries = new List<string>();
        public Dictionary<String, Double> propValues = new Dictionary<string, double>();
    }

    public class ImageString
    {
        public String imageCodedTo64 { get; set; }
    }
}
